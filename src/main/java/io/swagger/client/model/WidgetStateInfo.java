/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.WidgetInActiveInfo;
import java.io.IOException;

/**
 * WidgetStateInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-09-06T11:31:50.276+05:30")
public class WidgetStateInfo {
  /**
   * State of the Widget
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE"),
    
    AUTHORING("AUTHORING"),
    
    CANCELLED("CANCELLED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("widgetInActiveInfo")
  private WidgetInActiveInfo widgetInActiveInfo = null;

  public WidgetStateInfo state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * State of the Widget
   * @return state
  **/
  @ApiModelProperty(value = "State of the Widget")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public WidgetStateInfo widgetInActiveInfo(WidgetInActiveInfo widgetInActiveInfo) {
    this.widgetInActiveInfo = widgetInActiveInfo;
    return this;
  }

   /**
   * Specify custom message which will be displayed  to the user or the URL to which user will be redirected when the widget is accessed in disabled state. This can be specified only in PUT request
   * @return widgetInActiveInfo
  **/
  @ApiModelProperty(value = "Specify custom message which will be displayed  to the user or the URL to which user will be redirected when the widget is accessed in disabled state. This can be specified only in PUT request")
  public WidgetInActiveInfo getWidgetInActiveInfo() {
    return widgetInActiveInfo;
  }

  public void setWidgetInActiveInfo(WidgetInActiveInfo widgetInActiveInfo) {
    this.widgetInActiveInfo = widgetInActiveInfo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WidgetStateInfo widgetStateInfo = (WidgetStateInfo) o;
    return Objects.equals(this.state, widgetStateInfo.state) &&
        Objects.equals(this.widgetInActiveInfo, widgetStateInfo.widgetInActiveInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, widgetInActiveInfo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WidgetStateInfo {\n");
    
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    widgetInActiveInfo: ").append(toIndentedString(widgetInActiveInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

