group = 'com.adobe.sign'
version = '1.0.0'


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.2'
    }
}

allprojects {
repositories {
    jcenter()
}


apply plugin: 'java'
	
sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7
	
task execute(type:JavaExec) {
    main = System.getProperty('mainClass')
    classpath = sourceSets.main.runtimeClasspath
}


ext {
    swagger_annotations_version = "1.5.0"
    jackson_version = "2.4.2"
    jackson_datatype_joda = "2.1.5"
    jersey_version = "1.18"
    jodatime_version = "2.3"
    commons_validator_version = "1.5.0"
    junit_version = "4.8.1"
}
dependencies {
    compile "io.swagger:swagger-annotations:$swagger_annotations_version"
    compile "com.sun.jersey:jersey-client:$jersey_version"
    compile "com.sun.jersey.contribs:jersey-multipart:$jersey_version"
    compile "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jackson_datatype_joda"
    compile "joda-time:joda-time:$jodatime_version"
    compile "io.swagger:swagger-annotations:$swagger_annotations_version"
    compile "io.swagger:swagger-annotations:$swagger_annotations_version"
    compile "commons-validator:commons-validator:$commons_validator_version"
    testCompile "junit:junit:$junit_version"
}
}

project(':rest-api-sdk') {
   def newJarName = rootProject.name + '-' + rootProject.version
   jar.baseName = newJarName
   jar.doLast {
      copy {
        from "${buildDir}/libs/${newJarName}.jar"        
        into "../build/libs"
     }
  }
}

project(':rest-api-sample') {
    dependencies {
        compile project(':rest-api-sdk')
        sourceSets {
            samples{
                main {
                    java {
                        srcDir './src/main/java'
                    }
                }
            }
        }
        def list=["ArchiveAllSignedAgreements",
                  "CreateAlternateParticipant",
                  "CreateNewGroupInAccount",
                  "CreateNewUserInAccount",
                  "CreateNewWidgetWithCounterSigners",
                  "DownloadAuditTrail",
                  "DownloadDocumentsOfAgreement",
                  "GetGroupsInAccount",
                  "GetNextParticipantInfoOfAllWaitingAgreements",
                  "GetPersonalLibraryDocumentsOfUser",
                  "GetSearchAgreementAssetEventsForUser",
                  "GetStatusOfAgreements",
                  "GetStatusOfMegaSigns",
                  "GetUrlForManagePage",
                  "GetUrlForSettingsPage",
                  "GetUrlForViewAgreementAssetPage",
                  "GetUsersInAccount",
                  "RetrieveFormDataOfWidget",
                  "SendAgreementUsingLibraryDocument",
                  "SendAgreementUsingTransientDocument",
                  "SendMegaSignUsingLibraryDocument",
                  "SendMegaSignUsingTransientDocument",
                  "SendReminderOnPendingAgreements"].toArray()
        def fileName = ""
        def pathPrefix = "com.adobe.sign.api."
        def filePath = ""
        task createTasks {
            list.length.times { counter ->
                fileName = list[counter]
                filePath = pathPrefix +list[counter]
                task "Sample_$fileName"(type: JavaExec) {
                    main = filePath
                    classpath = sourceSets.main.runtimeClasspath
                }
            }
        }
        task allSamples (dependsOn: [createTasks,tasks.matching{Task task -> task.name.startsWith("Sample_")}]){
        }
    }
}
